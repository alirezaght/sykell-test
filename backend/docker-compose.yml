version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: sykell_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: sykell_db
      MYSQL_USER: sykell_user
      MYSQL_PASSWORD: sykell_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d      
    networks:
      sykell_network:
        aliases:
          - mysql  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Temporal server using MySQL
  temporal:
    image: temporalio/auto-setup:1.28
    container_name: sykell_temporal
    environment:
      - DB=mysql8
      - DB_PORT=3306
      - MYSQL_SEEDS=mysql
      - MYSQL_USER=temporal_user
      - MYSQL_PWD=temporal_password
      - MYSQL_DATABASE=temporal
      - MYSQL_VISIBILITY_DATABASE=temporal_visibility
      - TEMPORAL_CLI_ADDRESS=127.0.0.1:7233
    ports:
      - "7233:7233"
    healthcheck:
      # use 'tctl namespace describe' – it fails cleanly until the namespace exists
      test: ["CMD", "tctl", "--address", "temporal:7233", "namespace", "describe", "default"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 120s 
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - sykell_network

  temporal-admin-tools:
    image: temporalio/admin-tools:1.28
    container_name: sykell_temporal_admin
    restart: unless-stopped
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    depends_on:
      temporal:
        condition: service_healthy
    networks:
      - sykell_network

  temporal-ui:
    image: temporalio/ui:2.39.0
    container_name: sykell_temporal_ui
    restart: unless-stopped
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      # Add your frontends if you’ll hit UI from a browser app in dev
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    ports:
      - "8080:8080"
    depends_on:
      temporal:
        condition: service_healthy
    networks:
      - sykell_network

  temporal-worker:
    # Development worker with hot reload
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: builder
    volumes:
      - ./backend:/app
      - go_mod_cache:/go/pkg/mod
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: debug
      LOG_FORMAT: console
    # Use air for hot reload
    command: sh -c "go mod download && air -c .air-worker.toml"
    depends_on:
      temporal:
        condition: service_healthy

volumes:
  mysql_data:
    driver: local

networks:
  sykell_network:
    driver: bridge


